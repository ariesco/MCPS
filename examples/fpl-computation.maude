fmod SYNTAX is
  pr QID .

  sorts Var Num Op Exp BVar Boolean BOp BExp FunVar VarList NumList ExpList Prog Dec .

  *** Preregularity check
  subsort Boolean < Num .

***  subsort Qid < Var .
  op V : Qid -> Var .
  subsort Var < Exp .
  subsort Num < Exp .

***  subsort Qid < BVar .
  op BV : Qid -> BVar .
  subsort BVar < BExp .
  subsort Boolean < BExp .

  op FV : Qid -> FunVar .

  ops + - * : -> Op [ctor] .

  op z : -> Num [ctor] .
  op s : Num -> Num [ctor iter] .

  subsort Exp < ExpList .
  op nilEL : -> ExpList [ctor] .
  op _,_ : ExpList ExpList -> ExpList [ctor assoc prec 30] .

  op ___ : Exp Op Exp -> Exp [ctor prec 20] .
  op let_=_in_ : Var Exp Exp -> Exp [ctor prec 25] .
  op If_Then_Else_ : BExp Exp Exp -> Exp [ctor prec 25] .
  op _`(_`) : FunVar ExpList -> Exp [ctor prec 15] .
  *** Msg
  op to_:_ : Exp Exp -> Exp [ctor prec 10] .
  *** Receive
  op receive : -> Exp [ctor] .

  ops T F : -> Boolean [ctor] .
  ops And Or : -> BOp [ctor] .
  op ___ : BExp BOp BExp -> BExp [ctor prec 20] .
  op Not_ : BExp -> BExp [ctor prec 15] .
  op Equal : Exp Exp -> BExp [ctor] .

  subsort Var < VarList .
  op nilVL : -> VarList .
  op _,_ : VarList VarList -> VarList [assoc prec 30] .
  subsort VarList < ExpList .

  subsort Num < NumList .
  op nilNL : -> NumList [ctor] .
  op _,_ : NumList NumList -> NumList [ctor assoc prec 30] .
  subsort NumList < ExpList .

  op <_,_> : Exp Dec -> Prog .
  op nil : -> Dec .
  op _`(_`)<=_ : FunVar VarList Exp -> Dec [prec 30] .
  op _&_ : Dec Dec -> Dec [assoc comm id: nil prec 40] .

  op exDec1 : -> Dec .
  eq exDec1 =
    FV('Fac)(V('x)) <= If Equal(V('x),z) Then s(z)
                       Else V('x) * FV('Fac)(V('x) - s(z)) &
    FV('Rem)(V('x) , V('y)) <= If Equal(V('x),V('y)) Then z
                             Else If Equal(V('y) - V('x), z) Then V('y)
                                  Else FV('Rem)(V('x) , V('y) - V('x)) &
    FV('Double)(V('x)) <= V('x) + V('x) .
endfm

fmod AP is
  pr SYNTAX .

  op Ap : Op Num Num -> Num .
  op _+._ : Num Num -> Num .
  op _*._ : Num Num -> Num .
  op _-._ : Num Num -> Num .

  vars n n' : Num .

  eq Ap(+,n,n') = n +. n' .
  eq Ap(*,n,n') = n *. n' .
  eq Ap(-,n,n') = n -. n' .
  eq z +. n = n .
  eq s(n) +. n' = s(n +. n') .
  eq z *. n = z .
  eq s(n') *. n = (n' *. n) +. n .
  eq z -. n = z .
  eq s(n') -. z = s(n') .
  eq s(n') -. s(n) = n' -. n .

  op Ap : BOp Boolean Boolean -> Boolean .
  op _and_ : Boolean Boolean -> Boolean .
  op _or_ : Boolean Boolean -> Boolean .

  var bv bv' : Boolean .

  eq Ap(And,bv,bv') = bv and bv' .
  eq Ap(Or,bv,bv') = bv and bv' .
  eq T and bv = bv .
  eq F and bv = F .
  eq T or bv = T .
  eq F or bv = bv .

endfm

fmod ENV is
  inc SYNTAX .

  sorts Value Variable .

  subsorts Num Boolean < Value .
  subsorts Var BVar < Variable .

  sort ENV .

  op mt : -> ENV [ctor] .
  op _=_ : Variable Value -> ENV [ctor prec 20] .
  op __ : ENV ENV -> ENV [ctor assoc id: mt prec 30] .
  op _`(_`) : ENV Var -> Num .
  op _`(_`) : ENV BVar -> Boolean .
  op _`[_/_`] : ENV Value Variable -> ENV [prec 35] .
  op _`[_/_`] : ENV NumList VarList -> ENV [prec 35] .
  op remove : ENV Variable -> ENV .

  vars X X' : Variable .
  var V : Value .
  var ro : ENV .
  var n : Num .
  var x : Var .
  var nl : NumList .
  var xl : VarList .

  eq remove(mt, X) = mt .
  eq remove(X = V ro, X') = if X == X' then ro else X = V remove(ro,X') fi .
  eq ro [V / X] = remove(ro,X) X = V .
  eq ro [n, nl / x, xl] = (ro[n / x]) [nl / xl] .
  eq ro [nilNL / nilVL] = ro .
  eq (X = V ro)(X') = if X == X' then V else ro(X') fi .

endfm

fmod SUBSTITUTION is
  pr SYNTAX .
  pr CONVERSION .

  sort VarSet .

  op mt : -> VarSet .
  subsort Var < VarSet .
  op _U_ : VarSet VarSet -> VarSet [assoc comm id: mt] .
  eq x U x = x . *** idempotency

  *** FVar returns the free Var (not BVar)
  op FVarE : Exp -> VarSet .
  op FVarB : BExp -> VarSet .
  op FVar : ExpList -> VarSet .

  op _in_ : Var VarSet -> Bool .
  op _not-in_ : Var VarSet -> Bool .
  op _\_ : VarSet VarSet -> VarSet .
  op new : VarSet -> Var .
  op new : VarSet Nat -> Var .

  var n : Num .
  vars x y x' : Var .
  vars e e' e'' e1 e2 : Exp .
  var op : Op .
  var F : FunVar .
  var bx : BVar .
  vars be be1 be2 : BExp .
  var bop : BOp .
  var el : ExpList .
  vars VS VS' : VarSet .
  var N : Nat .
  var xl : VarList .

  eq FVarE(n) = mt .
  eq FVarE(x) = x .
  eq FVarE(e1 op e2) = FVarE(e1) U FVarE(e2) .
  eq FVarE(If be Then e1 Else e2) = FVarB(be) U FVarE(e1) U FVarE(e2) .
  eq FVarE(let x = e in e') = (FVarE(e') \ x) U FVarE(e) .
  eq FVarE(F(el)) = FVar(el) .
  eq FVarE(receive) = mt .
  eq FVarE(to e1 : e2) = FVarE(e1) U FVarE(e2) .

  eq FVarB(T) = mt .
  eq FVarB(F) = mt .
  eq FVarB(Not be) = FVarB(be) .
  eq FVarB(be1 bop be2) = FVarB(be1) U FVarB(be2) .
  eq FVarB(bx) = mt .
  eq FVarB(Equal(e1,e2)) = FVarE(e1) U FVarE(e2) .

  eq FVar(nilEL) = mt .
  eq FVar(e,el) = FVarE(e) U FVar(el) .

  eq x in mt = false .
  eq x in (y U VS) = (x == y) or (x in VS) .

  eq x not-in VS = not (x in VS) .

  eq (mt \ VS') = mt .
  eq (y U VS) \ VS' = if (y in VS') then VS \ VS'
                      else y U (VS \ VS') fi .


  eq new(VS) = new(VS, 0) .
***  eq new(VS, N) = if V(index('z,N)) not-in VS then V(index('z,N))
  eq new(VS, N) = if V(qid(string(N, 10))) not-in VS then V(qid(string(N, 10)))
                  else new(VS, N + 1) fi .

  *** substitution of an expression for a variable, page 53

  op _[_/_] : Exp Exp Var -> Exp .
  op _[_/b_] : BExp Exp Var -> BExp .
  op _[_/_]  : ExpList Exp Var -> ExpList .

  eq y [e' / x] = if x == y then e' else y fi .

  eq n [e' / x] = n .

  eq receive [e / x] = receive .
  eq (to e : e') [e'' / x] = to (e [e'' / x]) : (e' [e'' / x]) .

  eq (e1 op e2) [e' / x] = (e1 [e' / x]) op (e2 [e' / x]) .

  eq (If be Then e1 Else e2) [e' / x] =
      If (be[e' /b x]) Then (e1[e' / x]) Else (e2[e' / x]) .

  eq (let x = e1 in e2) [e' / x] = let x = (e1 [e' / x]) in e2 .

  ceq (let y = e1 in e2) [e' / x] =
       let y = (e1 [e' / x]) in (e2 [e' / x])
       if x =/= y /\ y not-in FVarE(e') .

  ceq (let y = e1 in e2) [e' / x] =
       let x' = (e1 [e' / x]) in ((e2[x' / y]) [e' / x])
       if x =/= y /\ y in FVarE(e') /\
          x' := new(FVarE(e') U FVarE(e2)) .

  eq F(el) [e' / x] = F(el [e' / x]) .

  eq nilEL [e' / x] = nilEL .
  eq (e, el) [e' / x] =  (e[e' / x]), (el[e' / x]) .

  eq T [e' /b x] = T .
  eq F [e' /b x] = F .

  eq bx [e' /b x] = bx .

  eq (Not be) [e' /b x] = Not (be[e' /b x]) .

  eq (be1 bop be2) [e' /b x] = (be1 [e' /b x]) bop (be2 [e' /b x]) .

  eq Equal(e1,e2) [e' /b x] = Equal(e1[e' / x],e2[e' / x]) .


  *** multiple simultaneous substitution

  op _[_/_] : Exp ExpList VarList -> Exp .

  *** simultaneous substitution is equivalent to a sequence of sequential
  *** substitutions if the substituted variables do not occur in the
  *** substituting expressions

  eq e [e', el / x, xl] = (e [e' / x])[el / xl] .

endfm


mod COMPUTATION is
  inc AP .
  inc ENV .
  inc SUBSTITUTION .

  sort Statement .
  subsorts Num Boolean < Statement .
  op _,_|-_ : Dec ENV Exp -> Statement [prec 40] .
  op _,_|-_ : Dec ENV BExp -> Statement [prec 40] .

  vars D D' : Dec .
  var ro : ENV .
  vars n n' id : Num .
  vars x x' x1 x2 y : Var .
  vars bx bx' : BVar .
  var v v' v1 v2 : Num .
  var bv bv' : Boolean .
  var op : Op .
  vars e e' e'' e1 e2 e1' e2' : Exp .
  var el : ExpList .
  vars be be' be'' be1 be2 : BExp .
  var bop : BOp .
  var F : FunVar .

  *** page 103

  rl [VarRc] : D,ro |- x => ro(x) .

  rl  [OpRc1] : D,ro |- v op v' => Ap(op,v,v') .
  crl [OpRc2] : D,ro |- e op e' => e'' op e'
            if D,ro |- e  => e'' .
  crl [OpRc3] : D,ro |- e op e' => e op e''
            if D,ro |- e'  => e'' .

  crl [IfRc1] : D,ro |- If be Then e Else e' => If be' Then e Else e'
            if D,ro |- be => be' .
  rl  [IfRc2] : D,ro |- If T Then e Else e' => e .
  rl  [IfRc3] : D,ro |- If F Then e Else e' => e' .

  crl [LocRc1] : D,ro |- let x = e in e' => let x = e'' in e'
             if D,ro |- e  => e'' .
  rl  [LocRc2] : D,ro |- let x = v in e' => e'[v / x] .

  crl [FunRc1] : D,ro |- F(e1) => F(e1')
             if D,ro |- e1 => e1' .
  crl [FunRc2] : D,ro |- F(v1) => e[v1 / x1]
             if F(x1)<= e & D' := D .

  crl [FunRc3] : D,ro |- F(e1,e2) => F(e1',e2)
             if D,ro |- e1 => e1' .
  crl [FunRc4] : D,ro |- F(e1,e2) => F(e1,e2')
             if D,ro |- e2 => e2' .
  crl [FunRc5] : D,ro |- F(v1,v2) => e[v1 / x1][v2 / x2]
             if F(x1,x2)<= e & D' := D .

  *** Send simplification
  crl [send_inner1] : D, ro |- to id : e
   =>                to id : e'
   if D,ro |- e  => e' .

  *** Send simplification
  crl [send_inner2] : D, ro |- to e : e'
   =>                to e'' : e'
   if D,ro |- e'  => e'' .


  *** page 104

  rl [BVarRc] : D,ro |- bx => ro(bx) .

  rl  [BOpRc1] : D,ro |- bv bop bv' => Ap(bop,bv,bv') .
  crl [BOpRc2] : D,ro |- be bop be' => be'' bop be'
            if D,ro |- be  => be'' .
  crl [BOpRc3] : D,ro |- be bop be' => be bop be''
            if D,ro |- be'  => be'' .

  crl [NotRc1] : D,ro |- Not be => Not be'
             if D,ro |- be => be' .
  rl  [NotRc2] : D,ro |- Not T => F .
  rl  [NotRc3] : D,ro |- Not F => T .

  crl [EqRc1] : D,ro |- Equal(e,e') => Equal(e'',e')
            if D,ro |- e => e'' .
  crl [EqRc2] : D,ro |- Equal(e,e') => Equal(e,e'')
            if D,ro |- e' => e'' .
  crl [EqRc3] : D,ro |- Equal(v,v') => T
            if v == v' .
  crl [EqRc4] : D,ro |- Equal(v,v') => F
            if v =/= v' .

  *** reflexive, transitive closure

  op _,_|=_ : Dec ENV Exp -> Statement [prec 40] .

  rl  [zero] : D,ro |= v => v .  *** no step
  crl [more] : D,ro |= e => v
            if D,ro |- e => e'   *** one step
            /\ D,ro |= e' => v . *** all the rest
endm

mod PROCESS is
 pr COMPUTATION .

 sort Process Processes System .
 subsort Process < Processes .

 sort MsgList .
 subsort Num < MsgList .

 op nilML : -> MsgList [ctor] .
 op _._ : MsgList MsgList -> MsgList [ctor assoc id: nilML] .

 op [_|_,_|_] : Num ENV Exp MsgList -> Process [ctor] .

 op noProc : -> Processes [ctor] .
 op __ : Processes Processes -> Processes [ctor assoc comm id: noProc] .

 op |_,_| : Processes Dec -> System [ctor] .

 vars nl nl' : MsgList .
 vars n id id' : Num .
 var  ps : Processes .
 vars ro ro' : ENV .
 vars e e' : Exp .
 var  x : Var .
 var  D : Dec .

 rl [receive] :
    [ id | ro, let x = receive in e | n . nl]
 => [ id | ro, let x = n in e | nl] .

 rl [send] :
    | [id | ro, let x = (to id' : n) in e | nl] [id' | ro', e' | nl'] ps , D |
 => | [id | ro, let x = z in e | nl] [id' | ro', e' | nl' . n] ps , D | .

 crl [advance-process] :
     | [ id | ro, e  | nl] ps, D |
  => | [ id | ro, e' | nl] ps, D |
  if D,ro |- e => e' .
endm

mod EXAMPLE is
 pr PROCESS .

 op init : -> System .

 eq init = | [z      | mt, FV('server)(s(z), s^2(z)) | nilML]
             [s(z)   | mt, FV('client)(z)            | nilML]
             [s^2(z) | mt, FV('client)(z)            | nilML], decs | .

 op decs : -> Dec .
 eq decs =
     FV('client)(V('x)) <= let V('y) = receive
                           in let V('z) = to V('x) : V('y)
                              in V('z) &
     FV('server)(V('x), V('y)) <= let V('a) = to V('x) : z
                                  in let V('b) = to V('y) : s(z)
                                     in let V('c) = receive
                                        in let V('d) = receive
                                           in If Equal(V('c), z) And Equal(V('d), s(z))
                                              Then s(z)
                                              Else z .
endm

load model-checker.maude

mod PROPS is
 pr LTL-SIMPLIFIER .
 pr SATISFACTION .
 pr PROCESS .

 subsort System < State .

 var  ps : Processes .
 var  nl : MsgList .
 vars n id : Num .
 var  s : System .
 var  ro : ENV .
 var  D : Dec .

 op finalValue : Num Num -> Prop [ctor] .

 eq | [id | ro, n | nl] ps, D | |= finalValue(id, n) = true .
 eq s |= finalValue(id, n) = false .
endm

mod TEST is
 pr MODEL-CHECKER .
 pr EXAMPLE .
 pr PROPS .
endm

***(
red modelCheck(init, <> [] finalValue(z, s(z))) .
)

***(
red in META-LEVEL : metaReduce(upModule('TEST, false), 'modelCheck['init.System,'<>_['`[`]_['finalValue['z.Num,'s['z.Num]]]]]) .
red in META-LEVEL : metaReduce(upModule('TEST, true), 'modelCheck['init.System,'<>_['`[`]_['finalValue['z.Num,'s['z.Num]]]]]) .
)

select MCPS-INIT .

loop init-mcps .

(select TEST .)

(msg creation to_:_ .)

(msg consumption receive .)

(unit Process id 1 .)

(set mode process .)

(msg passing analysis modelCheck(init, <> [] finalValue(z, s(z))) .)